import { useState, useEffect, useMemo, useCallback } from "react";
import axios from "axios";

const PostsPanel = () => {
  const [posts, setPosts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);
  const [postCount, setPostCount] = useState(10);
  const [useAxios, setUseAxios] = useState(true); // –†–µ–∂–∏–º: axios / fetch

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Axios ===
  const loadWithAxios = useCallback(async () => {
    try {
      const response = await axios.get("https://jsonplaceholder.typicode.com/posts");
      setPosts(response.data);
      setIsError(false);
    } catch (error) {
      setIsError(true);
      console.error("Axios error:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Fetch ===
  const loadWithFetch = useCallback(async () => {
    try {
      const response = await fetch("https://jsonplaceholder.typicode.com/posts");
      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
      const data = await response.json();
      setPosts(data);
      setIsError(false);
    } catch (error) {
      setIsError(true);
      console.error("Fetch error:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // === –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ===
  useEffect(() => {
    if (useAxios) {
      loadWithAxios();
    } else {
      loadWithFetch();
    }
  }, [useAxios, loadWithAxios, loadWithFetch]);

  // === –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ===
  const memoizedPosts = useMemo(() => {
    return posts.slice(0, postCount);
  }, [posts, postCount]);

  if (isLoading) {
    return (<section><p className="status-message">–ó–∞–≥—Ä—É–∑–∫–∞...</p></section>);
  }

  // === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ===
  return (
    <section>
      <h2>–ü–æ—Å—Ç—ã<span className="anchor">üß∑</span></h2>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É axios –∏ fetch */}
      <div className="method-toggle">
        <label>–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞:</label>
        <label>
          <input
            type="radio"
            checked={useAxios}
            onChange={() => setUseAxios(true)}
          />
          Axios
        </label>
        <label>
          <input
            type="radio"
            checked={!useAxios}
            onChange={() => setUseAxios(false)}
          />
          Fetch
        </label>
      </div>

      {/* –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ */}
      <div className="range-slider">
        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤:</label>
        <input
          type="range"
          min="1"
          max="100"
          value={postCount}
          onChange={(e) => setPostCount(parseInt(e.target.value))}
        />
        <span>{postCount}</span>
      </div>

      {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–∫–∏ */}
      {isLoading && <p className="status-message">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
      {isError && <p className="status-message">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚ùå</p>}

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ */}
      <ol className="posts-container">
        {memoizedPosts.map((post) => (
          <li key={post.id} className="post-card">
            <h3 className="post-title">{post.title}</h3>
            <p className="post-body">{post.body}</p>
          </li>
        ))}
      </ol>
    </section>
  );
};

export default PostsPanel;